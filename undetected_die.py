# -*- coding: utf-8 -*-


#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget
from datetime import datetime
from force_sherd import ForceTypePopup
from translator import tr, current_language


class Ui_AddDieDialog(QtWidgets.QDialog):
    def setupUi(self, Dialog, path):
        Dialog.setObjectName("Dialog")
        Dialog.resize(782, 800)
        self.path = path
        self.layout = QtWidgets.QVBoxLayout(Dialog)
        self.cancel = QtWidgets.QPushButton(Dialog)
        self.cancel.setGeometry(QtCore.QRect(630, 750, 130, 30))
        self.cancel.setObjectName("cancel")
        self.die_picture = DrawablePictureLabel(self, self.path)
        self.die_picture.setGeometry(QtCore.QRect(30, 30, 680, 680))
        self.die_picture.setMinimumSize(QtCore.QSize(680, 680))
        self.die_picture.setMaximumSize(QtCore.QSize(680, 680))
        self.die_picture.setText("")
        self.die_picture.setScaledContents(True)
        self.die_picture.setObjectName("die_picture")
        self.layout.addWidget(self.die_picture)
        self.validate = QtWidgets.QPushButton(Dialog)
        self.validate.setGeometry(QtCore.QRect(490, 750, 131, 30))
        self.validate.setObjectName("validate")
        self.validate.setDefault(True)
        self.validate.setAutoDefault(True)
        self.set_number = QtWidgets.QLineEdit(Dialog)
        self.set_number.setGeometry(QtCore.QRect(200, 750, 137, 30))
        self.set_number.setText("")
        self.set_number.setObjectName("set_number")
        self.set_type = QtWidgets.QComboBox(Dialog)
        self.set_type.setGeometry(QtCore.QRect(40, 750, 150, 30))
        self.set_type.setProperty("placeholderText", "")
        self.set_type.setObjectName("set_type")
        self.set_type.addItem("")
        self.set_type.addItem("")
        self.set_type.addItem("")
        self.set_type.addItem("")
        self.set_type.addItem("")
        self.set_type.addItem("")
        self.set_type.addItem("")
        self.set_type.addItem("")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(10, 10, 761, 51))
        self.label.setWordWrap(True)
        self.label.setObjectName("label")
        self.HelpForce = QtWidgets.QPushButton(Dialog)
        self.HelpForce.setGeometry(QtCore.QRect(350, 750, 41, 30))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("resources/media/magnifier.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.HelpForce.setIcon(icon)
        self.HelpForce.setObjectName("HelpForce")
        self.HelpForce.clicked.connect(self.force_finder) # type: ignore
        
        self.retranslateUi(Dialog)
        self.cancel.clicked.connect(Dialog.exit) # type: ignore
        self.validate.clicked.connect(Dialog.accept) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Dialog)


    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", tr("falseNeg")))
        self.cancel.setText(_translate("Dialog", tr("cancel")))
        self.validate.setText(_translate("Dialog", tr("validate")))
        self.set_number.setPlaceholderText(_translate("Dialog", tr("typeNr")))
        listChoices = tr("lMotifs")
        self.set_type.setCurrentText(_translate("Dialog", tr("lMotifs")[0]))
        for i in range(len(listChoices)):
            self.set_type.setItemText(i, _translate("Dialog", tr("lMotifs")[i]))
        self.set_type.setItemText(9, _translate("Dialog", tr("undet")))
        self.set_type.setItemText(10, _translate("Dialog", tr("new")))
        self.label.setText(_translate("Dialog", tr("falseNegIntro")))
        
    def force_finder(self): #the user clicks on the magnifier
        value = self.set_type.currentText()
        with open("logs.txt", "a") as logFile:
            logFile.write(datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")+"    Within false negative popup, force type popup opened with category \""+value+"\"\n")
        self.popupForceType = Force_Type_Class(self, value)

class DrawablePictureLabel(QtWidgets.QLabel):
    def __init__(self, parent=None, path=""):
        super().__init__(parent)
        self.click_positions=[]
        self.die_picture = QtGui.QPixmap(path).scaled(680,680, QtCore.Qt.IgnoreAspectRatio)


    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.click_positions += [(event.pos().x(),event.pos().y())]
            if len(self.click_positions)>2: #keep only last 2 clicks
                self.click_positions=[self.click_positions[-2],self.click_positions[-1]]
            self.update()


    def paintEvent(self, event): #draws a crosshair at locations of self.click_positions
        painter = QtGui.QPainter(self)
        pen = QtGui.QPen(QtGui.QColor("red"), 2)
        painter.setPen(pen)
        painter.drawPixmap(0,0,self.die_picture)
        for position in self.click_positions:
            x,y = position
            painter.drawLine(0, y, 680, y)
            painter.drawLine(x, 0, x, 680)
        painter.end()

class Force_Type_Class(QWidget):
    def __init__(self, parent, categ):
        super().__init__()
        self.parent = parent
        self.ui = ForceTypePopup(categ, None)
        self.ui.imageClicked.connect(self.clicked)
        self.ui.show()

    def clicked(self, clickedName, clickedCat, clickedNum): #the arguments are the actual name and # of die type
        with open("logs.txt", "a") as logFile:
            logFile.write(datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")+"     Within false negative popup, in force die type popup, user clicked on QLabel "+clickedCat+" "+str(clickedNum)+"\n")
        self.parent.set_type.setCurrentText(clickedCat)
        self.parent.set_number.setText(str(clickedNum))
        self.ui.close()